<?php
/**
 * Implements hook_config_info().
 */
function random_frontpage_config_info() {
	$prefixes['random_frontpage.settings'] = array(
		'label' => t('Random Frontpage settings'),
		'group' => t('Configuration'),
	);
	return $prefixes;
}

/**
 *   Returns an associative array of node types and names.
 */
function random_frontpage_gettypes() {
  $typesArray = $nodesMenu = array();
  $typesArray = node_type_get_types();
	foreach($typesArray as $key => $value) {
		$nodesMenu[$value->type] = $value->name;
	}
  return $nodesMenu;
}

/**
 * Implements hook_admin().
 */
function random_frontpage_admin() {
  $form = array();
  $config = config('random_frontpage.settings');
	$form['#config'] = 'random_frontpage.settings';
  $form['intro_text'] = array(
  '#markup' => 'Please clear your cache after changing these settings.'
  );
	$form['nodetypes'] = array(
  	'#type' => 'select',
  	'#title' => t('Random Frontpage node type'),
  	'#options' => random_frontpage_gettypes(),
  	'#default_value' => $config->get('nodetype'),
  	'#description' => "Please select the node type you wish to display at the URL '/frontpage'",
  	'#required' => TRUE,
	);
  $form['pagepath'] = array(
    '#type' => 'textfield',
    '#title' => t('Random Frontpage path'),
    '#default_value' => $config->get('pagepath'),
    '#description' => "Please enter a name if not '/frontpage' you would like to use.",
    '#required' => TRUE,
  );
	return system_settings_form($form);
}

/**
 * Impliments hook_form_validate().
 */
function random_frontpage_admin_validate($form, &$form_state) {
  $config = config('random_frontpage.settings');
  $formValues = $form_state['values'];
  $config->set('nodetype', $formValues['nodetypes']);
  $config->set('pagepath', $formValues['pagepath']);
  $config->save();
}

/**
 * Implements hook_menu().
 */
function random_frontpage_menu() {
  $items = array();
  $pagename = config_get('random_frontpage.settings', 'pagepath');
  $items[$pagename] = array(
    'page callback' => 'random_frontpage_view',
    'access arguments' => array(
			'access content'
		),
  );
  $items['admin/config/system/random_frontpage'] = array(
    'title' => 'Random Frontpage',
    'description' => 'Random Frontpage settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array(
			'random_frontpage_admin'
		),
    'access arguments' => array(
			'access administration pages'
		),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Displays a random node of the selected content type.
 */
function random_frontpage_view() {
	$nodetype = config_get('random_frontpage.settings', 'nodetype');
  /* check to see if the user has configured a node type choice in admin */
  /* In case we don't have any nodes at all in the system when we install the module */
  /* we output a placeholder page prompting the user to configure a choice */
  $textoutput = "Please set a node type to randomize at <a href='/admin/config/system/random_frontpage'>/admin/config/system/random_frontpage</a>.";

  if ($nodetype) {
    $nodeids = array();
    $nid_query = db_query('SELECT nid FROM {node} WHERE type = :' . $nodetype, array(':' . $nodetype => $nodetype));

    while ($row = $nid_query->fetchAssoc()) {
      $nodeids[] = $row['nid'];
    }
		// check to see if there are any nodes
    if (count($nodeids) != 0) {
			// if there are two or more nodes
      if (count($nodeids) > 1) {
      	/* pick a random NID */
        $key = array_rand($nodeids, 1);
        $nid = $nodeids[$key];
      }
			// if there is only one node use it
      if (count($nodeids) == 1) {
      	$nid = $nodeids[0];
      }
			// load whatever node we found
      $node = node_load($nid);
			// try and render the node
      if (isset($node)) {
        $node_view = node_view($node);
        $rendered_node = backdrop_render($node_view);
      }
      if (isset($rendered_node)) {
        return $rendered_node;
      }
    } elseif (count($nodeids) == 0) {
      return $textoutput;
    }
  } elseif (!$nodetype) {
    return $textoutput;
  }
}
